# -*- mode: org -*-
#+STARTUP: indent hidestars showall

* github setting keys
https://github.com/settings/keys
1. ssh-keygen -t rsa -b 4096 "your_email@example.com"  -> this can be
   the user account from one of your laptops, example adam@quack
2. go to github/profile/personal settings/ssh and gpg keys/new ssh key
3. copy and paste ~/.ssh/id_rsa.pub
4. now should be able to hub clone frankieliu/Admin
5. [using ssh-agent]:
   eval "$(ssh-agent -s)"
   ssh-add ~/.ssh/id_rsa (or location of your private key)

https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#adding-your-ssh-key-to-the-ssh-agent

* stanford rec
ashtanga yoga
https://recwell.stanford.edu/Program/GetProgramDetails?courseId=7bad575a-700c-4c18-8f94-518fce90b625&semesterId=8bb86a37-662a-4c75-a803-d9d5ec76860e

facility
https://rec.stanford.edu/facilities/aoerc/

Courtesy Card, Recreating All Access Card
https://cardinalatwork.stanford.edu/benefits-rewards/sweeteners/courtesy-recreation-id-cards

requirements to bring with you
marriage license and birth certificate
https://uit.stanford.edu/service/campuscard/courtesycard

policy
https://adminguide.stanford.edu/chapter-2/subchapter-4/policy-2-4-3
https://rec.stanford.edu/facility-access/affiliates/

Tressider
https://uit.stanford.edu/service/campuscard

* farmshare
** change shell
https://web.stanford.edu/group/farmshare/cgi-bin/wiki/index.php/FAQ#How_do_I_change_my_shell.3F
https://web.stanford.edu/group/farmshare/cgi-bin/wiki/index.php/FAQ#How_do_I_change_my_shell.3F

** slurm longer time
While the maximum runtime for jobs is 2 days (unless you are
submitting a job using the long quality-of-service), the default
runtime is 2 hours. If your job requires more time to run you must
request the additional time explicitly, using --time. You can also
request less time than the default.

** cluster description
https://web.stanford.edu/group/farmshare/cgi-bin/wiki/index.php/FarmShare_2#Remote_display

rice 1 core 8 gb

For more excess of limits use:
srun --pty --qos=interactive $SHELL -l
srun --pty --partition=gpu --gres=gpu:1 --qos=interactive $SHELL -l
srun --pty --partition=bigmem --mem=96G --qos=interactive $SHELL -l

wheat
10 nodes with 16 cores and 128GB mem
2 large-mem nodes with 16 cores and 768GB mem
srun --partition=bigmem --qos=bigmem --mem=96G
sbatch --partition=bigmem --qos=bigmem --mem=96G

oat
10 nodes with 16 cores 128GB mem, one Tesla K40 GPU
srun --partition=gpu --qos=gpu --gres=gpu:1
sbatch --partition=gpu --qos=gpu --gres=gpu:1

--partitions: normal bigmem gpu

** time limits
--qos: normal (2days max) long (7days max) interactive (1day max)

** quotas
Per use quote 48GB
only rice can access /afs
Use /farmshare/user_data for scratch

* slurm summary
https://slurm.schedmd.com/pdfs/summary.pdf
srun  --mem=<MB> -N<minnodes> --partition=<names> --qos=<name>
--time=<time>
sacct --accounts=frankieliu --en
scancel  # cancel jobs
squeue --users=frankliu
sinfo --long

* gentlemen of vision
gentlemen of vision bay area
https://www.youtube.com/watch?v=OFb0EUIkYac
https://www.youtube.com/watch?v=THJ2YEvRgkM
http://victorsho.com/#!/?page_id=42

* prevent ssh from closing during forward
ssh -N -L 5903:localhost:5901 frankliu@wheat09.stanford.edu

-N : don't run a command, i.e. stays connected without having to run a
command useful during port forwarding

https://serverfault.com/questions/598210/prevent-closing-of-ssh-local-port-forwarding
Some advocate autossh - don't know what this really is

* slurm run interactive shell
srun --qos=interactive --time=02:00:00 --pty bash -i

* web programming fundamentals
cs193x
https://web.stanford.edu/class/cs193x/lectures/

* stanford online resources 
install this chrome plugin
https://chrome.google.com/webstore/detail/library-access/hghakoefmnkhamdhenpbogkeopjlkpoa/related

* naxos library
https://stanford-naxosmusiclibrary-com.stanford.idm.oclc.org/catalogue/item.asp?cid=MELCD1001348

* cgi
https://www.tcl.tk/man/aolserver3.0/cgi-ch1.htm
** stanford
https://tools.stanford.edu/cgi-bin/cgi-request
** instruction
https://uit.stanford.edu/service/cgi

* afs stanford
https://uit.stanford.edu/software/afs/download
requires openafs in windows and macs for ubuntu see separate instructions
** kerberos
https://uit.stanford.edu/service/kerberos/install_debian
This might be a little old? (2014)
Too many steps...
** afs for mac or windows
https://web.stanford.edu/service/afs/intro/mounting.html
** webafs
https://web.stanford.edu/service/afs/webafs/userguide/index.html
** afs for beginners
https://web.stanford.edu/service/afs/intro/index.html

* linuxbrew
frankliu@rice12:/afs/ir.stanford.edu/users/f/r/frankliu/cgi-bin$ sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
==> Select the Linuxbrew installation directory
- Enter your password to install to /home/linuxbrew/.linuxbrew (recommended)
- Press Control-D to install to /home/frankliu/.linuxbrew
- Press Control-C to cancel installation
Sorry, user frankliu may not run sudo on rice12.stanford.edu.
==> This script will install:
/home/frankliu/.linuxbrew/bin/brew
/home/frankliu/.linuxbrew/share/doc/homebrew
/home/frankliu/.linuxbrew/share/man/man1/brew.1
/home/frankliu/.linuxbrew/share/zsh/site-functions/_brew
/home/frankliu/.linuxbrew/etc/bash_completion.d/brew
/home/frankliu/.cache/Homebrew/
/home/frankliu/.linuxbrew/Homebrew
==> The following new directories will be created:
/home/frankliu/.linuxbrew/bin
/home/frankliu/.linuxbrew/etc
/home/frankliu/.linuxbrew/include
/home/frankliu/.linuxbrew/lib
/home/frankliu/.linuxbrew/sbin
/home/frankliu/.linuxbrew/share
/home/frankliu/.linuxbrew/var
/home/frankliu/.linuxbrew/opt
/home/frankliu/.linuxbrew/share/zsh
/home/frankliu/.linuxbrew/share/zsh/site-functions
/home/frankliu/.linuxbrew/Cellar
/home/frankliu/.linuxbrew/Caskroom
/home/frankliu/.linuxbrew/Homebrew
/home/frankliu/.linuxbrew/Frameworks

Press RETURN to continue or any other key to abort
==> /bin/mkdir -p /home/frankliu/.linuxbrew
==> /bin/chown frankliu:operator /home/frankliu/.linuxbrew
==> /bin/mkdir -p /home/frankliu/.linuxbrew/bin /home/frankliu/.linuxbrew/etc /home/frankliu/.linuxbrew/include /home/frankliu/.linuxbrew/lib /home/frankliu/.linuxbrew/sbin /home/frankliu/.linuxbrew/share /home/frankliu/.linuxbrew/var /home/frankliu/.linuxbrew/opt /home/frankliu/.linuxbrew/share/zsh /home/frankliu/.linuxbrew/share/zsh/site-functions /home/frankliu/.linuxbrew/Cellar /home/frankliu/.linuxbrew/Caskroom /home/frankliu/.linuxbrew/Homebrew /home/frankliu/.linuxbrew/Frameworks
==> /bin/chmod g+rwx /home/frankliu/.linuxbrew/bin /home/frankliu/.linuxbrew/etc /home/frankliu/.linuxbrew/include /home/frankliu/.linuxbrew/lib /home/frankliu/.linuxbrew/sbin /home/frankliu/.linuxbrew/share /home/frankliu/.linuxbrew/var /home/frankliu/.linuxbrew/opt /home/frankliu/.linuxbrew/share/zsh /home/frankliu/.linuxbrew/share/zsh/site-functions /home/frankliu/.linuxbrew/Cellar /home/frankliu/.linuxbrew/Caskroom /home/frankliu/.linuxbrew/Homebrew /home/frankliu/.linuxbrew/Frameworks
==> /bin/chmod 755 /home/frankliu/.linuxbrew/share/zsh /home/frankliu/.linuxbrew/share/zsh/site-functions
==> /bin/chown frankliu /home/frankliu/.linuxbrew/bin /home/frankliu/.linuxbrew/etc /home/frankliu/.linuxbrew/include /home/frankliu/.linuxbrew/lib /home/frankliu/.linuxbrew/sbin /home/frankliu/.linuxbrew/share /home/frankliu/.linuxbrew/var /home/frankliu/.linuxbrew/opt /home/frankliu/.linuxbrew/share/zsh /home/frankliu/.linuxbrew/share/zsh/site-functions /home/frankliu/.linuxbrew/Cellar /home/frankliu/.linuxbrew/Caskroom /home/frankliu/.linuxbrew/Homebrew /home/frankliu/.linuxbrew/Frameworks
==> /bin/chgrp operator /home/frankliu/.linuxbrew/bin /home/frankliu/.linuxbrew/etc /home/frankliu/.linuxbrew/include /home/frankliu/.linuxbrew/lib /home/frankliu/.linuxbrew/sbin /home/frankliu/.linuxbrew/share /home/frankliu/.linuxbrew/var /home/frankliu/.linuxbrew/opt /home/frankliu/.linuxbrew/share/zsh /home/frankliu/.linuxbrew/share/zsh/site-functions /home/frankliu/.linuxbrew/Cellar /home/frankliu/.linuxbrew/Caskroom /home/frankliu/.linuxbrew/Homebrew /home/frankliu/.linuxbrew/Frameworks
==> /bin/mkdir -p /home/frankliu/.cache/Homebrew
==> Downloading and installing Linuxbrew...
remote: Enumerating objects: 7, done.
remote: Counting objects: 100% (7/7), done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 122304 (delta 0), reused 2 (delta 0), pack-reused 122297
Receiving objects: 100% (122304/122304), 27.74 MiB | 25.46 MiB/s, done.
Resolving deltas: 100% (89729/89729), done.
From https://github.com/Linuxbrew/brew
 * [new branch]      master     -> origin/master
 * [new tag]         1.0.0      -> 1.0.0
 * [new tag]         1.0.1      -> 1.0.1
 * [new tag]         1.0.2      -> 1.0.2
 * [new tag]         1.0.3      -> 1.0.3
 * [new tag]         1.0.4      -> 1.0.4
 * [new tag]         1.0.5      -> 1.0.5
 * [new tag]         1.0.6      -> 1.0.6
 * [new tag]         1.0.7      -> 1.0.7
 * [new tag]         1.0.8      -> 1.0.8
 * [new tag]         1.0.9      -> 1.0.9
 * [new tag]         1.1.0      -> 1.1.0
 * [new tag]         1.1.0.1    -> 1.1.0.1
 * [new tag]         1.1.1      -> 1.1.1
 * [new tag]         1.1.10     -> 1.1.10
 * [new tag]         1.1.11     -> 1.1.11
 * [new tag]         1.1.12     -> 1.1.12
 * [new tag]         1.1.13     -> 1.1.13
 * [new tag]         1.1.2      -> 1.1.2
 * [new tag]         1.1.2.1    -> 1.1.2.1
 * [new tag]         1.1.3      -> 1.1.3
 * [new tag]         1.1.4      -> 1.1.4
 * [new tag]         1.1.5      -> 1.1.5
 * [new tag]         1.1.6      -> 1.1.6
 * [new tag]         1.1.7      -> 1.1.7
 * [new tag]         1.1.8      -> 1.1.8
 * [new tag]         1.1.9      -> 1.1.9
 * [new tag]         1.2.0      -> 1.2.0
 * [new tag]         1.2.1      -> 1.2.1
 * [new tag]         1.2.2      -> 1.2.2
 * [new tag]         1.2.3      -> 1.2.3
 * [new tag]         1.2.4      -> 1.2.4
 * [new tag]         1.2.5      -> 1.2.5
 * [new tag]         1.2.6      -> 1.2.6
 * [new tag]         1.2.7      -> 1.2.7
 * [new tag]         1.2.8      -> 1.2.8
 * [new tag]         1.3.0      -> 1.3.0
 * [new tag]         1.3.1      -> 1.3.1
 * [new tag]         1.3.2      -> 1.3.2
 * [new tag]         1.3.3      -> 1.3.3
 * [new tag]         1.3.4      -> 1.3.4
 * [new tag]         1.3.5      -> 1.3.5
 * [new tag]         1.3.6      -> 1.3.6
 * [new tag]         1.3.7      -> 1.3.7
 * [new tag]         1.3.8      -> 1.3.8
 * [new tag]         1.3.9      -> 1.3.9
 * [new tag]         1.4.0      -> 1.4.0
 * [new tag]         1.4.1      -> 1.4.1
 * [new tag]         1.4.2      -> 1.4.2
 * [new tag]         1.4.3      -> 1.4.3
 * [new tag]         1.5.0      -> 1.5.0
 * [new tag]         1.5.1      -> 1.5.1
 * [new tag]         1.5.10     -> 1.5.10
 * [new tag]         1.5.11     -> 1.5.11
 * [new tag]         1.5.12     -> 1.5.12
 * [new tag]         1.5.13     -> 1.5.13
 * [new tag]         1.5.14     -> 1.5.14
 * [new tag]         1.5.2      -> 1.5.2
 * [new tag]         1.5.3      -> 1.5.3
 * [new tag]         1.5.4      -> 1.5.4
 * [new tag]         1.5.5      -> 1.5.5
 * [new tag]         1.5.6      -> 1.5.6
 * [new tag]         1.5.7      -> 1.5.7
 * [new tag]         1.5.8      -> 1.5.8
 * [new tag]         1.5.9      -> 1.5.9
 * [new tag]         1.6.0      -> 1.6.0
 * [new tag]         1.6.1      -> 1.6.1
 * [new tag]         1.6.10     -> 1.6.10
 * [new tag]         1.6.11     -> 1.6.11
 * [new tag]         1.6.12     -> 1.6.12
 * [new tag]         1.6.13     -> 1.6.13
 * [new tag]         1.6.14     -> 1.6.14
 * [new tag]         1.6.15     -> 1.6.15
 * [new tag]         1.6.16     -> 1.6.16
 * [new tag]         1.6.17     -> 1.6.17
 * [new tag]         1.6.2      -> 1.6.2
 * [new tag]         1.6.3      -> 1.6.3
 * [new tag]         1.6.4      -> 1.6.4
 * [new tag]         1.6.5      -> 1.6.5
 * [new tag]         1.6.6      -> 1.6.6
 * [new tag]         1.6.7      -> 1.6.7
 * [new tag]         1.6.8      -> 1.6.8
 * [new tag]         1.6.9      -> 1.6.9
 * [new tag]         1.7.0      -> 1.7.0
 * [new tag]         1.7.1      -> 1.7.1
 * [new tag]         1.7.2      -> 1.7.2
 * [new tag]         1.7.3      -> 1.7.3
 * [new tag]         1.7.4      -> 1.7.4
 * [new tag]         1.7.5      -> 1.7.5
 * [new tag]         1.7.6      -> 1.7.6
 * [new tag]         1.7.7      -> 1.7.7
Checking out files: 100% (1472/1472), done.
HEAD is now at 7655407 .github/move.yml: Fix for Linuxbrew
==> Downloading https://linuxbrew.bintray.com/bottles-portable-ruby/portable-ruby-2.3.7.x86_64_linux.bottle.tar.gz
######################################################################## 100.0%
==> Pouring portable-ruby-2.3.7.x86_64_linux.bottle.tar.gz
==> Linuxbrew is run entirely by unpaid volunteers. Please consider donating:
  https://github.com/Linuxbrew/brew#donations
==> Tapping homebrew/core
Cloning into '/home/frankliu/.linuxbrew/Homebrew/Library/Taps/homebrew/homebrew-core'...
remote: Enumerating objects: 4897, done.
remote: Counting objects: 100% (4897/4897), done.
remote: Compressing objects: 100% (4693/4693), done.
remote: Total 4897 (delta 50), reused 329 (delta 12), pack-reused 0
Receiving objects: 100% (4897/4897), 4.26 MiB | 0 bytes/s, done.
Resolving deltas: 100% (50/50), done.
Checking connectivity... done.
Checking out files: 100% (4913/4913), done.
Tapped 3 commands and 4678 formulae (4,936 files, 13.2MB).
Already up-to-date.
==> Installation successful!

==> Homebrew has enabled anonymous aggregate formulae and cask analytics.
Read the analytics documentation (and how to opt-out) here:
  https://docs.brew.sh/Analytics.html

==> Homebrew is run entirely by unpaid volunteers. Please consider donating:
  https://github.com/Homebrew/brew#donations
==> Next steps:
- Install the Linuxbrew dependencies if you have sudo access:
  Debian, Ubuntu, etc.
    sudo apt-get install build-essential
  Fedora, Red Hat, CentOS, etc.
    sudo yum groupinstall 'Development Tools'
  See http://linuxbrew.sh/#dependencies for more information.
- Add Linuxbrew to your ~/.profile by running
    echo 'export PATH="/home/frankliu/.linuxbrew/bin:$PATH"' >>~/.profile
    echo 'export MANPATH="/home/frankliu/.linuxbrew/share/man:$MANPATH"' >>~/.profile
    echo 'export INFOPATH="/home/frankliu/.linuxbrew/share/info:$INFOPATH"' >>~/.profile
- Add Linuxbrew to your PATH
    PATH="/home/frankliu/.linuxbrew/bin:$PATH"
- We recommend that you install GCC by running:
    brew install gcc
- After modifying your shell profile, you may need to restart your session
  (logout and then log back in) if the brew command isn't found.
- Run `brew help` to get started
- Further documentation: 
    https://docs.brew.sh
Warning: /home/frankliu/.linuxbrew/bin is not in your PATH.

* snap without sudo
https://ubuntu-mate.community/t/snap-without-sudo/15473
snap login
snap install rg (ripgrep)

* print python verion
https://stackoverflow.com/questions/1252163/printing-python-version-in-output
import sys
print(sys.version)

import platform
platform.python_version()

* every nth row excel
=offset($A$2,(ROW()-2)*1,0)    : every other row 2,4,6,8, ....
=offset($A$23,(ROW()-23)*2,0)  : every third row 23,26,29, ....

* react and flask
https://realpython.com/the-ultimate-flask-front-end/
https://realpython.com/the-ultimate-flask-front-end-part-2/

These don't really explain how flask is being used but it does have
a simple react application.

* vue and django and rabbitmq
https://danidee10.github.io/blog/

* django and cgi 
https://gist.github.com/philchristensen/5845530
https://docs.djangoproject.com/en/1.8/howto/deployment/fastcgi/

* let's see if fastcgi works
http://flask.pocoo.org/docs/0.12/deploying/fastcgi/

* full stack react
https://codeburst.io/creating-a-full-stack-web-application-with-python-npm-webpack-and-react-8925800503d9

* stanford geo
** shared folder
https://app.box.com/folder/14552064708
** RIA
http://www.guillaumelobet.be/RIA/
** morphology TPS thin plate spline
https://en.wikipedia.org/wiki/Geometric_morphometrics_in_anthropology
http://www.dg1an3.net/2015/03/warptps.html
** eucledian distance measurement
https://www.youtube.com/watch?v=zGPmrRCnF6Y

* latex proper subset 
https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols

* basic probability
https://www.youtube.com/watch?v=Y8EOkJ75elM

* what does independence look like on venn diagram
https://www.youtube.com/watch?v=pV3nZAsJxl0
https://www.ck12.org/book/CK-12-Algebra-II-with-Trigonometry/section/12.5/

* user guide afs storage and ssh fundamental slurm
https://web.stanford.edu/group/farmshare/cgi-bin/wiki/index.php/User_Guide#Storage
https://slurm.schedmd.com/quickstart.html
https://srcc.stanford.edu/services-systems-overview
https://web.stanford.edu/group/farmshare/cgi-bin/wiki/index.php/Main_Page#Software

* singularity
https://singularity.lbl.gov/docs-docker
http://singularity.lbl.gov/install-request

flow of singularity
http://singularity.lbl.gov/docs-flow

build images from scratch
http://singularity.lbl.gov/quickstart#build-images-from-scratch
http://singularity.lbl.gov/archive/docs/v2-2/create-image

mounting
http://singularity.lbl.gov/archive/docs/v2-2/docs-mount

hub - where images are located
https://www.singularity-hub.org/collections/1819

manual build
https://github.com/singularityhub/singularityhub.github.io/wiki/Manual-Build

build a container
https://github.com/singularityhub/singularityhub.github.io/wiki/Build-A-Container

my singularity repo - don't change it
https://github.com/frankieliu/singularity

company behind singularity
https://www.sylabs.io/singularity/

faq on singularity
http://singularity.lbl.gov/faq
http://singularity.lbl.gov/faq

forum on singularity
https://groups.google.com/a/lbl.gov/forum/#!forum/singularity

web browser in singularity
https://groups.google.com/a/lbl.gov/forum/#!topic/singularity/rtGSOf8Q0Iw

example singularity script with firefox
https://github.com/vsoch/singularity-butterfly/blob/master/Singularity

sample singularity with emacs vim python stuff
http://singularity-hub.org/containers/3790

sample docker with tensorflow
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/Dockerfile

* gsuite
https://uit.stanford.edu/service/gsuite/login
Webmail (GSB faculty, staff, and students, and some undergraduate students): webmail.stanford.edu
Calendar (GSB faculty, staff, and students, and some undergraduate students): webcal.stanford.edu
Drive: webdocs.stanford.edu

** creating sites
https://gsuite.google.com/learning-center/products/sites/get-started/#!/
** deploy web apps and add them to your url
https://developers.google.com/apps-script/guides/web

* ipython notebooks in google cloud
https://colab.research.google.com/notebooks/welcome.ipynb#recent=true

* ubuntu list all installed packages
sudo apt list --installed
sudo dpkg -l
https://www.rosehosting.com/blog/list-all-installed-packages-with-apt-on-ubuntu/

manually installed packages
Using apt-mark and aptitude
comm -23 <(apt-mark showmanual | sort -u) <(gzip -dc /var/log/installer/initial-status.gz | sed -n 's/^Package: //p' | sort -u)
comm -23 <(aptitude search '~i !~M' -F '%p' | sed "s/ *$//" | sort -u) <(gzip -dc /var/log/installer/initial-status.gz | sed -n 's/^Package: //p' | sort -u)
https://askubuntu.com/questions/2389/generating-list-of-manually-installed-packages-and-querying-individual-packages

* unpack deb standalone apps
https://unix.stackexchange.com/questions/138188/easily-unpack-deb-edit-postinst-and-repack-deb
mkdir tmp
dpkg-deb -R original.deb tmp
dpkg-deb -b tmp fixed.deb

fakeroot might be needed

* installing google-chrome
download the deb
dpkg-deb -r <package>.deb <location>
https://www.linuxbabe.com/ubuntu/install-google-chrome-ubuntu-16-04-lts
https://support.google.com/chrome/answer/95346?co=GENIE.Platform%3DDesktop&hl=en
https://www.google.com/chrome/

* firefox download
https://www.mozilla.org/en-US/firefox/download/thanks/
https://ftp.mozilla.org/pub/firefox/releases/63.0b9/linux-x86_64/en-US/

* ubuntu docker repository 
https://hub.docker.com/search/?isAutomated=0&isOfficial=0&page=1&pullCount=0&q=ubuntu+18&starCount=0
** x11-apps in docker
https://stackoverflow.com/questions/16296753/can-you-run-gui-applications-in-a-docker-container/25280523#25280523

** docker with visual code, dotnet cli, npm, emacs, firefox and more
https://github.com/cmiles74/docker-vscode

** guis in docker
http://wiki.ros.org/docker/Tutorials/GUI

* stanford webauth and user authentication
https://uit.stanford.edu/service/web/centralhosting/howto_user
https://uit.stanford.edu/service/web/centralhosting/userauth

SAML 2.0
https://uit.stanford.edu/service/saml

Combine node.js sso with shibboleth saml identify provider
https://wiki.library.ucsf.edu/pages/viewpage.action?pageId=361762610

* lamp vs mean replacing apache with node.js
https://stackoverflow.com/questions/5346055/can-i-replace-apache-with-node-js
run apache in proxy mode to serve dynamic pages with node and
static pages with apache

https://blog.cloudboost.io/get-apache-and-node-working-together-on-the-same-domain-with-javascript-ajax-requests-39db51959b79
apache and node working together

* web design stanford
https://uit.stanford.edu/guide/website
https://uit.stanford.edu/guide/website/personal
https://uit.stanford.edu/service/web/design

Web App Toolkit - database
https://web.stanford.edu/dept/its/communications/webservices/wiki/index.php/Stanford_Web_Application_Toolkit

Wiki services
https://opensource.stanford.edu/topics/web-development
https://web.stanford.edu/dept/its/communications/webservices/wiki/index.php/How_to_get_your_first_PHP_script_running_at_Stanford
https://tools.stanford.edu/cgi-bin/cgi-request
https://uit.stanford.edu/service/cgi/personal
https://web.stanford.edu/~frankliu/cgi-bin/lsbin.sh
https://web.stanford.edu/~frankliu/cgi-bin/deploy.fcgi/slasfd
https://uit.stanford.edu/service/cgi

Debugging
https://uit.stanford.edu/service/cgi/debugging
https://uit.stanford.edu/service/cgi/debugging

CGI scripts
https://uit.stanford.edu/service/cgi/scripts

CGI service
https://uit.stanford.edu/service/cgi

Php cookbook
http://web.stanford.edu/dept/its/communications/webservices/wiki/index.php/PHP_Cookbook

Cgi faq
https://uit.stanford.edu/service/cgi/faq
https://uit.stanford.edu/service/cgi/faq

Example CGI scripts
https://uit.stanford.edu/service/cgi/scripts
https://tools.stanford.edu/sumysql

Infrastructure tools
https://tools.stanford.edu/
https://tools.stanford.edu/cgi-bin/cgi-request

Web resources
https://uit.stanford.edu/service/web

http://web.stanford.edu/dept/its/communications/webservices/wiki/index.php/Main_Page
http://web.stanford.edu/dept/its/communications/webservices/wiki/index.php/Stanford_Web_Application_Toolkit
https://web.stanford.edu/dept/its/communications/webservices/wiki/index.php/Special:Statistics

https://stanford.service-now.com/services?id=get_help
https://stanford.service-now.com/services?id=get_help

* flask setup
http://flask.pocoo.org/

* node in google cloud
https://cloud.google.com/nodejs/docs/setup
https://cloud.google.com/free/docs/always-free-usage-limits
https://cloud.google.com/appengine/pricing
https://cloud.google.com/community/tutorials/run-expressjs-on-google-app-engine
https://cloud.google.com/nodejs/getting-started/hello-world

* my web page
https://web.stanford.edu/~frankliu/cgi-bin/lsbin.sh

* node-and-npm-in-30-seconds.sh
https://gist.github.com/isaacs/579814

* package managers
http://linuxbrew.sh/
https://opensource.com/article/18/7/evolution-package-managers
https://unix.stackexchange.com/questions/5535/non-root-package-managers

* using pkgsrc
https://rundong.wordpress.com/2013/10/18/pkgsrc-my-favorite-non-root-package-manager-on-linux/

* install node js with homebrew!!
https://blog.teamtreehouse.com/install-node-js-npm-linux

* farmshare connections
https://srcc.stanford.edu/farmshare2/connecting

* undertand full stack nice diagrams *good* react node express
https://www.smashingmagazine.com/2016/03/server-side-rendering-react-node-express/

* cgi and node
http://www.cgi-node.org/
http://www.cgi-node.org/downloads
https://nodejs.org/download/

* node.js cgi-node
basically runs javascript, should have fastcgi though
https://stackoverflow.com/questions/5248769/node-js-webserver-with-cgi-support-open-source

* great forum discussion on cgi-node
https://news.ycombinator.com/item?id=8835564

* express js over fastcgi-node
https://stackoverflow.com/questions/23777920/use-expressjs-app-via-fastcgi 

* apache proxy for node.js server
https://stackoverflow.com/questions/32605232/how-to-deploy-nodejs-app-on-php-apache-server
<VirtualHost example.com:*>
    ProxyPreserveHost On

    ProxyPass /api http://localhost:3000/
    ProxyPassReverse /api http://localhost:3000/

    ServerName localhost
</VirtualHost>

https://stackoverflow.com/questions/9831594/apache-and-node-js-on-the-same-server
Also has information about adding mod_proxy for apache
ProxyPass is great if you can fire up your own node.js webserver

* not useful since not using a proxy, only useful for local serving
https://atticuswhite.com/blog/apache-serving-nodejs/

* node.js vs nginx and apache
https://www.quora.com/When-using-node-js-do-you-still-need-Nginx-or-Apache

* sample php cgi
https://web.stanford.edu/~frankliu/cgi-bin/phpinfo.php

* telegram bot with node.js
https://www.youtube.com/watch?v=Te7HcRhwOI4

* apache and flask
https://stackoverflow.com/questions/31870244/apache-webserver-and-flask-app
http://flask.pocoo.org/docs/0.12/deploying/mod_wsgi/

* setting up lamp server from scratch! *good*
https://www.digitalocean.com/community/tutorials/how-to-set-up-an-apache-mysql-and-python-lamp-server-without-frameworks-on-ubuntu-14-04

* alternatives to cgi and why cgi is bad
https://www.embedthis.com/blog/posts/stop-using-cgi/stop-using-cgi.html

* python wsgi servers *good*
has some great history about wsgi in general
https://blog.appdynamics.com/engineering/an-introduction-to-python-wsgi-servers-part-1/

* kernel modules
https://unix.stackexchange.com/questions/184877/how-to-list-all-loadable-kernel-modules
find /lib/modules/$(uname -r) -type f -name '*.ko'
find /lib/modules/$(uname -r) -type f -name '*.ko*'
ls /proc/modules
lsmod

* List apache modules
https://superuser.com/questions/284898/how-to-check-which-apache-modules-are-enabled-installed
apachectl -t -D DUMP_MODULES  # must be root
a2query -m
curl http://localhost/server-info
ls /etc/apache2/mods-enabled/
ls /etc/apache2/mods-available/

* hello world cgi python
https://web.stanford.edu/~frankliu/cgi-bin/hello.py

* mod_wsgi (web server gateway interface) apache and python
https://modwsgi.readthedocs.io/en/develop/user-guides/quick-installation-guide.html

* stanford webauth apache basicauth
limiting access
https://cs.stanford.edu/computing-guide/web-pages

* cgi-node
http://www.cgi-node.org/docs


* passing variable to python cgi script
https://www.google.com/search?ei=SRLMW4qgNKG90PEPj4ilsAI&q=how+to+pass+variables+to+python+cgi&oq=how+to+pass+variables+to+python+cgi&gs_l=psy-ab.3..33i22i29i30.15702.22871..23529...3.0..1.237.2677.37j0j1......0....1..gws-wiz.......0j0i71j35i39j0i67j0i131j0i20i263j35i304i39j0i13j0i22i30.Ei_8gCAXy_8
https://stackoverflow.com/questions/7687490/how-to-pass-variable-to-a-python-cgi-script
https://stackoverflow.com/questions/18669024/passing-variable-with-python-cgi
https://stackoverflow.com/questions/3582398/getting-http-get-arguments-in-python
https://stackoverflow.com/questions/5822280/passing-parameters-to-a-cgi-program-using-the-url-python

* python package for cgi development
https://github.com/agordon/cgi-tools
https://docs.python.org/2/library/cgi.html

* flask quickstart minimal
https://tedboy.github.io/flask/quickstart/quickstart1.html

* virtual env in python script and apache
https://stackoverflow.com/questions/27695501/use-virtualenv-in-python-script

Better way than virtualenv
http://benjamincongdon.me/blog/2017/02/19/A-Better-Way-to-Wrangle-Python-Environments/

* running virtual env python flask + apache
https://homes.cs.washington.edu/~yjzhang/notes/python_web.html
Tells me to point browser to the
[address]/url/to/app/app.cgi/.

* Deploy
https://web.stanford.edu/~frankliu/cgi-bin/deploy.cgi/wss


* Flask by example
https://realpython.com/flask-by-example-part-1-project-setup/

* django rabbitmq vue.js flask cgi
https://danidee10.github.io/blog/
https://danidee10.github.io/2016/10/26/flask-by-example-6.html

* Fast CGI and flask
http://flask.pocoo.org/docs/0.12/deploying/fastcgi/
https://www.google.com/search?q=executables+anaconda&oq=executables+anaconda&aqs=chrome..69i57.6750j0j7&sourceid=chrome&ie=UTF-8

* linuxbrew chicken
https://github.com/Linuxbrew/homebrew-core/blob/master/Formula/chicken.rb

* module is an alias
               
which module
module: 	 aliased to eval ` $LMOD_CMD csh  !*` ; eval `$LMOD_SETTARG_CMD -s csh`

* trek 2200
http://www.roadbikereview.com/product/latest-bikes/road-bike/trek/2200.html
DESCRIPTION

Frame Material: aluminum, carbon seat stays
Frame Angles: 73.8 head, 73.5 seat
Sizes: 50cm, 52cm, 54cm, 56cm, 58cm, 60cm, 63cm
Colors: Blue
Fork: Bontrager Race Carbon
Rear Shock: Not applicable
Brake Levers: Shimano Ultegra STI Dual Control
Handlebar: Bontrager Race
Stem: Bontrager Race
Headset: 1 1/8" threadless Cane Creek C1
Front Der: Shimano 105
Crankset: Shimano Ultegra, 39/53 teeth
Rear Der: Shimano Ultegra SS
Pedals: Shimano PD-M520 SPD
Tires: 700 x 25c Bontrager Race Lite

Most are three piece cranks 9/12 20tpi

* bitcoin course
https://www.coursera.org/learn/cryptocurrency/lecture/gFEJL/cryptographic-hash-functions

* WSL
Powershell (as admin)

Note you need to upgrade windows 10 in order to wsl 

PS C:\Users\frank\Downloads> Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
PS C:\Users\frank\Downloads> Add-AppxPackage -Path ".\CanonicalGroupLimited.Ubuntu18.04onWindows_1804.2018.817.0_x64__79
rhkp1fndgsc.Appx"

Accessing windows /mnt/c

** Initializing 
https://docs.microsoft.com/en-us/windows/wsl/initialize-distro

** xwindows
vcxsrv-64.1.20.1.3.installer.exe

** what works in wsl
https://blogs.msdn.microsoft.com/wsl/2017/04/11/testing-the-windows-subsystem-for-linux/

* Mapping network drive
File explorer, there is a network icon on left pane or the This PC
Right click and Map network drive
Folder name (note you can also browse for the folder)
\\jitter\samba

* portable cygwin
https://github.com/MachinaCore/CygwinPortable/issues/28

* how to print last char of a file
https://superuser.com/questions/252692/how-to-print-last-character-of-a-file

tail -c 1 afile

* python run process in background and get process id
https://stackoverflow.com/questions/44107048/python-run-bash-command-with-redirection-in-background-and-get-the-process-id

use shell=True in Popen

* piping stdout and stderr popen python
https://stackoverflow.com/questions/2331339/piping-output-of-subprocess-popen-to-files

import subprocess
with open("stdout.txt",'wb') as out, open("stderr.txt",'wb') as err:
    subprocess.Popen("ls", stdout=out, stderr=err)
* print string to s text file python
https://stackoverflow.com/questions/5214578/python-print-string-to-text-file

with open('afile','w') as tf:
    tf.write('astring')
or  print('astring', file=tf)

* wb in python
https://stackoverflow.com/questions/2665866/what-is-the-wb-mean-in-this-code-using-python

writing to a file in binary mode

* unicode text in text file python
https://stackoverflow.com/questions/6048085/writing-unicode-text-to-a-text-file

foo = u'....'  # some unicode stuff here
f = open('test','w')
f.write(foo.encode('utf8')
f.close()

f = file('test','r')
print(f.read().decode('utf8'))

* measuring time python
https://stackoverflow.com/questions/7370801/measure-time-elapsed-in-python

import time
start = timt.time()
print("hello")
print(time.time() - start)

* echo python
https://stackoverflow.com/questions/17226912/why-does-simple-echo-in-subprocess-not-working

import subprocess
p = subprocess.Ppen('echo $HOME', shell=True, stdout=subprocess.PIPE)
print p.communicate()[0];

or
subprocess.check_output(cmd, shell=True);

* Passing double quote shell cmds to python
https://stackoverflow.com/questions/14928860/passing-double-quote-shell-commands-in-python-to-subprocess-popen

shell=True

scritp.sh
ffmepg -i "concat:1.ts|2.ts" -vcodec copy -acodec copy tmp.mp4

import subprocess
subprocell.call('.script.sh'; shell=True)


* chmod in python
https://stackoverflow.com/questions/12791997/how-do-you-do-a-simple-chmod-x-from-within-python
import os
import stat
st = os.stat('afile')
os.chmod('afile', st.st_mode | stat.S_IEXEC())
stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH

os.chmod("afile", 0o775)

* python wait for process to terminate
https://stackoverflow.com/questions/325463/launch-a-shell-command-with-in-a-python-script-wait-for-the-termination-and-ret

import os
os.system('ls')

import os
os.spawlp(os.P_WAIT,'ls','-l')

# replaces current process
import os
os.exec*()

import subprocess
cmd = ['ls', '-l]
suprocess.Popn(cmd).wait()

import subporcess
cmd = ['ls', '-l]
p = suprocess.Popn(cmd, stdout=subporcess.PIPE)
for line in p.stdout:
    print(line)
p.wait()
print(p.returncode)

